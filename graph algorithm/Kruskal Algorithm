Kruskal Algorithm

Kruskal Algorithm
 - greedy Algorithm을 이용하여 네트워크(가중치를 간선에 할당한 그래프)의 Minimum Spanning Tree를 구하는 것
 - 각 단계에서 Cycle을 이루지 않는 최소 cost의 edge를 선택하도록 함

동작
1. 그래프의 edge들을 cost를 기준으로 오름차순 정렬함
2. 정렬된 edge들 중 cycle을 이루지 않는 가장 작은 cost의 edge를 선택함
3. 선택한 edge를 현재의 MST에 추가함

** Cycle 생성 여부는 Union-Find Algorithm을 이용하여 확인
 - 선택한 Edge의 양 끝 node의 대표 node를 찾고, 만약 같은 값이라면 cycle을 이루므로 reject

시간 복잡도 (n개의 node, e개의 edge)
- Union-Find 알고리즘을 이용하면 Kruskal 알고리즘의 시간 복잡도는 edge들을 정렬하는 시간에 좌우된다.
    = 즉, edge e개를 퀵 정렬과 같은 효율적인 알고리즘으로 정렬한다면 O(elog₂e)
- 최악의 경우: 모든 node가 다른 모든 node들과 연결이 될 수 있기 때문에 e = n(n-1)/2 가 된다. 그러므로, 시간복잡도 O(n^2 * log₂n)

그래프 내에 적은 숫자의 간선만을 가지는 ‘희소 그래프(Sparse Graph)’의 경우 Kruskal 알고리즘이 적합하고
그래프에 간선이 많이 존재하는 ‘밀집 그래프(Dense Graph)’ 의 경우는 Prim 알고리즘이 적합하다