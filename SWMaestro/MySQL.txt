DATABASE (생활 코딩)
- 데이터의 양이 커지고 다양해지면서 입력, 저장, 출력이 어려워졌다.
- 따라서 데이터를 잘 정리정돈해서 필요할 때, 쉽게 꺼내 쓰고 싶다는 생각을 하게 되었다.
- 이러한 맥락에서 만들어진 SW가 DATABASE

관계형 데이터베이스
- 데이터를 표와 같은 형태로 정리정돈
- 정렬, 검색과 같은 작업을 빠르고 편리하고 안전하게 할 수 있음

MySQL의 구조
- 관계형 데이터베이스 : 엑셀과 같은 스프레드 시트 구조 / 여러 개의 표에 저장
- 나누어진 표를 잘 정리정돈해야 함
	- 파일에서 디렉토리와 같은 것의 필요성
	- MySQL에서는 ‘데이터베이스(스키마)’를 통해 표(table)들을 관리
	- 스키마 : 연관된 표들을 그룹핑하는데 사용하는 일종의 폴더와 같은 개념
	- 또한 이러한 스키마들을 ‘데이터베이스 서버’를 통해 관리

* MySQL 기본 문법*
- C : Create
- R : Read
- U : Update
- D : Delete

1. Create : 데이터베이스 및 테이블 생성
- DB 생성
	CREATE DATABASE DB_NAME
- DB 선택
	USE DB_NAME

- Table 생성
	CREATE TABLE TB_NAME
	(
		name1 type1,   <-- 필드1
		name2 type2,   <-- 필드2
		...
	);

제약조건
 - 테이블 생성시, 필드에 다양한 제약 조건을 걸어 원하는 데이터 타입만 저장하도록 설정 가능
 	1. NOT NULL : NULL 값 저장 불가
 	2. UNIQUE : 해당 필드는 중복값 허용 X
 	3. PRIMARY KEY : 해당 필드가 'NOT NULL'과 'UNIQUE' 조건을 모두 갖게 됨.
 	4. FOREIGN KEY : 하나의 테이블을 다른 테이블에 의존
 	5. DEFAULT : 해당 필드의 기본값을 

ALTER TABLE
 - ALTER 구문을 이용하여 테이블에 필드를 추가, 삭제 및 타입을 변경할 수 있음
 	1. ADD : 필드 추가
 		ALTER TABLE TB_NAME ADD FD_NAME FD_TYPE
 	2. DROP : 필드 삭제
 		ALTER TABLE TB_NAME DROP FD_NAME
 	3. MODIFY COLUMN : 필드 수정
 		ALTER TABLE TB_NAME MODIFY COLUMN FD_NAME FD_TYPE

INSERT
 - 테이블에 레코드 추가
 	1) INSERT INFO TB_NAME (FD_NAME1, FD_NAME2, ...)
	   VALUES (data1, data2, ...);
	= 필드 이름에 맞는 곳에 데이터 insert
 	2) INSERT INFO TB_NAME
 	   VALUES (data1, data2, ...);
 	= 스키마에 정의된 순서대로 필드 값 자동 대입

READ
 - 데이터베이스에 저장된 데이터를 읽어들임
 - SQL에서는 SELECT 구문을 이용
 	1) SELECT *    <-- *(star) : 전체
 	   FROM TB_NAME;
 	= 해당 테이블 전체를 불러옴
 	2) SELECT *
 	   FROM TB_NAME
 	   WHERE FD_NAME1 = 'A';
 	= 해당 테이블에서 필드1의 내용이 A인 모든 레코드를 불러옴
 	= WHERE 부분에 연산자를 이용한 여러 개의 조건이 들어갈 수도 있음
 	3) SELECT FD_NAME
 	   FROM TB_NAME
 	= 해당 테이블에서 원하는 필드의 값만 불러옴
 	4) SELECT DISTINCT FD_NAME
 	   FROM TB_NAME;
 	= 값을 불러올 떄, 중복값이 한번만 선택되도록 함
 	5) SELECT *
 	   FROM TB_NAME
 	   ORDER BY FD_NAME DESC(ASC);
 	= 필드를 지정하고, 지정한 필드를 기준으로 오름차순 혹은 내림차순으로 정렬
 	6) SELECT FD_NAME AS ALIAS
 	   FROM TB_NAME

 	   SELECT FD_NAME
 	   FROM TB_NAME AS ALIAS
 	= 필드나 테이블에 임시로 별칭을 부여함 -> 복잡한 이름을 읽기 쉽게

UPDATE
 - 레코드의 내용 수정
 	UPDATE TB_NAME
 	SET FD_NAME1 = data1, FD_NAME2 = data2, ...
 	(WHERE FD_NAME = data)
 	= 해당 테이블에서 SET에 명시된 필드들이 정의된 값으로 업데이트됨
 	= WHERE 구문이 있다면 조건에 해당되는 레코드들이 업데이트됨

DELETE
 - 레코드 삭제
 	DELETE FROM TB_NAME
 	WHERE FD_NAME = data
 	= 해당 테이블에서 WHERE 구문의 조건에 해당되는 레코드들이 삭제됨

=> '프로그래머스 SQL 고득점 Kit'로 적용 연습

연산자
 - 비교 연산자 : =, !=, <, >, <=, >= 사용 가능
 - 논리 연산자 : AND(&&), OR(||) 사용 가능
 - 기타 연산자
 	1) IN(data1, data2, ...) : 괄호 안에 값이 있는 경우
 	2) NOT IN(data1, data2, ...) : 괄호 안의 값이 없는 경우
 	3) BETWEEN a AND b : a 이상 b 이하의 값
 	4) LIKE('data%'), LIKE('%data'), LIKE('%data%')
 	 : 값이 data로 시작, 끝, 포함된 경우
 	5) NOT LIKE('data%'), NOT LIKE('%data'), NOT LIKE('%data%')
 	 : 값이 data로 시작이 아닌, 끝이 아닌, 포함되지 않는 경우
 	6) IS NULL : 값이 NULL인 경우
 	7) IS NOT NULL : 값이 NULL이 아닌 경우

LIMIT (프로그래머스 상위 n개 레코드 문제) 
 - 출력 레코드 수를 제한함
 	SELECT *
 	FROM TB_NAME
 	LIMIT n;
 	= 레코드를 위에서부터 n개 만큼 출력함

집계 함수
 - SELECT 구문에 들어감
 - FUNC(FD_NAME)으로 사용
 1. COUNT : NULL이 아닌 레코드의 수
 2.	SUM : 해당 필드 값들의 합계
 3. AVG : 해당 필드 값들의 평균
 4. MAX, MIN : 해당 필드의 최대값, 최소값

GROUP BY
 - 집계 함수의 결과를 특정 컬럼을 기준으로 묶어 출력해주는 쿼리
 	SELECT FD_NAME1, FUNC(FD_NAME2)
 	FROM TB_NAME
 	GROUP BY FD_NAME1;
 	= FD_NAME1을 기준으로 레코드들을 묶고, FD_NAME2에 대한 집계 함수를 실행

HAVING
 - GROUP BY의 결과를 다시 필터링하기 위한 쿼리
 - SELECT 구문의 WHERE에 사용하는 것과 비슷
 	SELECT FD_NAME1, FUNC(FD_NAME2)
 	FROM TB_NAME
 	GROUP BY FD_NAME1
 	HAVING FD_NAME2 > x;
 	= FD_NAME1을 기준으로 묶고, HAVING의 조건을 만족하는 레코드들에 대해 함수 실행





